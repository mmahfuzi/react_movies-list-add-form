{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","hasError","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","onChangeTitle","useCallback","newValue","onChangeDescription","onChangeImgUrl","onChangeImdbUrl","onChangeImdbId","newMovie","onSubmit","preventDefault","state","disabled","preparedMovies","App","listMovieCards","setListMovieCards","ReactDOM","render","document","getElementById"],"mappings":"ySAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,gBCMpC,IAAMC,EAA6B,SAAC,GAOpC,IADLC,EALAC,EAMI,EANJA,KACAC,EAKI,EALJA,MAKI,IAJJC,aAII,MAJIF,EAIJ,MAHJG,gBAGI,aAFJC,gBAEI,MAFO,WAAQ,EAEf,MADJL,SAGA,EAAaM,oBAAS,2BAASL,EAAT,YAZfM,KAAKC,SAASC,WAAWC,MAAM,GAYhB,IAAfC,EAAP,oBAGA,EAA6BL,oBAAS,GAAtC,mBAAOM,EAAP,KAAgBC,EAAhB,KAKA,OAFAb,EAAWY,GAAWR,IAAaF,EAGjC,sBAAKf,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ2B,QAASH,EAAlC,SACGR,IAGH,qBAAKhB,UAAU,UAAf,SACE,uBACEwB,GAAIA,EACJ,0BAAkBV,GAClBd,UAAW4B,IAAW,QAAS,CAC7B,YAAaf,IAEfgB,KAAK,OACLC,YAAW,gBAAWd,GACtBD,MAAOA,EACPG,SAAU,SAAAa,GAAK,OAAIb,EAASa,EAAMC,OAAOjB,MAA1B,EACfkB,OAAQ,kBAAMP,GAAU,EAAhB,MAIXb,GACC,mBAAGb,UAAU,iBAAb,mBAAkCgB,EAAlC,oBAIP,ECnDYkB,EAA2B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAGzC,EAA0BhB,mBAAS,GAAnC,mBAAOiB,EAAP,KAAcC,EAAd,KACA,EAA0BlB,mBAAS,IAAnC,mBAAOf,EAAP,KAAckC,EAAd,KACA,EAAsCnB,mBAAS,IAA/C,mBAAOd,EAAP,KAAoBkC,EAApB,KACA,EAA4BpB,mBAAS,IAArC,mBAAOjB,EAAP,KAAesC,EAAf,KACA,EAA8BrB,mBAAS,IAAvC,mBAAOZ,EAAP,KAAgBkC,EAAhB,KACA,EAA4BtB,mBAAS,IAArC,mBAAOR,EAAP,KAAe+B,EAAf,KAOMC,EAAgBC,uBACpB,SAACC,GAAD,OAAsBP,EAASO,EAA/B,GAA0C,CAACP,IAGvCQ,EAAsBF,uBAC1B,SAACC,GAAD,OAAsBN,EAAeM,EAArC,GAAgD,CAACN,IAG7CQ,EAAiBH,uBACrB,SAACC,GAAD,OAAsBL,EAAUK,EAAhC,GAA2C,CAACL,IAGxCQ,EAAkBJ,uBACtB,SAACC,GAAD,OAAsBJ,EAAWI,EAAjC,GAA4C,CAACJ,IAGzCQ,EAAiBL,uBACrB,SAACC,GAAD,OAAsBH,EAAUG,EAAhC,GAA2C,CAACH,IAWxCQ,EAAW,CACf9C,QACAC,cACAH,SACAK,UACAI,UAGF,OACE,uBACEX,UAAU,WAEVmD,SAAU,SAACpB,GACTA,EAAMqB,iBACNjB,EAAMe,GA7CVb,GAAS,SAAAgB,GAAK,OAAIA,EAAQ,CAAZ,IAwBdf,EAAS,IACTC,EAAe,IACfC,EAAU,IACVC,EAAW,IACXC,EAAU,GAoBP,EARH,UAUE,oBAAI1C,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEc,KAAK,QACLE,MAAM,QACND,MAAOX,EACPc,SAAUyB,EACV1B,UAAQ,IAGV,cAAC,EAAD,CACEH,KAAK,cACLE,MAAM,cACND,MAAOV,EACPa,SAAU4B,IAGZ,cAAC,EAAD,CACEhC,KAAK,SACLE,MAAM,YACND,MAAOb,EACPgB,SAAU6B,EACV9B,UAAQ,IAGV,cAAC,EAAD,CACEH,KAAK,UACLE,MAAM,WACND,MAAOR,EACPW,SAAU8B,EACV/B,UAAQ,IAGV,cAAC,EAAD,CACEH,KAAK,SACLE,MAAM,UACND,MAAOJ,EACPO,SAAU+B,EACVhC,UAAQ,IAGV,qBAAKjB,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACE6B,KAAK,SACL,UAAQ,gBACR7B,UAAU,iBACVsD,WAAYlD,GAASF,GAAUK,GAAWI,GAJ5C,uBAnDCyB,EA+DV,ECtHKmB,E,KAAkC7C,KAAI,SAAAX,GAAK,sBAC5CA,EAD4C,IAIpCyD,EAAe,WAC1B,MAA4CrC,mBAASoC,GAArD,mBAAOE,EAAP,KAAuBC,EAAvB,KAMA,OACE,sBAAK1D,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQgD,MAEtB,qBAAKzD,UAAU,UAAf,SACE,cAAC,EAAD,CAAUmC,MAAO,SAACpC,GAVA,IAACmD,IAWDnD,EAVtB2D,EAAkB,GAAD,mBAAKD,GAAL,CAAqBP,IAWjC,QAKR,EC3BDS,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.86f88701.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  hasError?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  hasError = false,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n\n  // eslint-disable-next-line no-param-reassign\n  hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie:React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  // const [hasError, setHasError] = useState(true);\n\n  const increaseCount = () => {\n    setCount(state => state + 1);\n  };\n\n  const onChangeTitle = useCallback(\n    (newValue: string) => setTitle(newValue), [setTitle],\n  );\n\n  const onChangeDescription = useCallback(\n    (newValue: string) => setDescription(newValue), [setDescription],\n  );\n\n  const onChangeImgUrl = useCallback(\n    (newValue: string) => setImgUrl(newValue), [setImgUrl],\n  );\n\n  const onChangeImdbUrl = useCallback(\n    (newValue: string) => setImdbUrl(newValue), [setImdbUrl],\n  );\n\n  const onChangeImdbId = useCallback(\n    (newValue: string) => setImdbId(newValue), [setImdbId],\n  );\n\n  const clear = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const newMovie = {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => {\n        event.preventDefault();\n        onAdd(newMovie);\n        increaseCount();\n        clear();\n      }}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={onChangeTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={onChangeDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={onChangeImgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={onChangeImdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={onChangeImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!(title && imgUrl && imdbUrl && imdbId)}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nconst preparedMovies = moviesFromServer.map(movie => ({\n  ...movie,\n}));\n\nexport const App:React.FC = () => {\n  const [listMovieCards, setListMovieCards] = useState(preparedMovies);\n\n  const addNewMovieCard = (newMovie: Movie) => {\n    setListMovieCards([...listMovieCards, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={listMovieCards} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(movie) => {\n          addNewMovieCard(movie);\n        }}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}